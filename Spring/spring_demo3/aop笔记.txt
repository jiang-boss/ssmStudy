AOP
1。面向切面编程 利用aop对业务逻辑的各个部分进行分离 降低程序的耦合度 提高程序的可重用性 提高开发效率
2.不通过修改源代码的方式添加原来的功能
AOP的底层原理 （动态代理）
有两种情况的动态代理
 第一种:有接口的情况使用jdk的动态代理
 第二种：没有接口的情况 使用CGLIB动态代理

 AOP术语
 1.连接点   类中的哪些方法被增强这些方法就是连接点
 2.切入点   实际被增强的方法
 3.通知（增强） 实际增强逻辑的部分就是增强
              有多种通知类型
               1.前置通知 @Before
               2.后置通知 @AfterReturning
               3.环绕通知 @Around
               4.异常通知 @AfterThrowing
               5.最终通知 @After
 4.切面  是一个动作 把我们的通知加入到切入点的的过程

 AOP的操作：
  spring对aop的操作一般基于aspectJ实现aop的操作
  两种方式：xml方式
           注解的方式
   步骤：1.创建要增强的类 User
        2.创建增强的类   UserProxy
        3.在xml文件中添加通知的配置
           （1）在spring配置文件中开启注解扫描
            （2）使用注解创建 User USerProxy 类
            （3）在增强类的上面添加注解@aspectJ注解
            (4)在spring配文件中开启生成代理对象的配置 <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

     细节:1.公共切入点表达式可以抽取出来
          2.多个增强类对同一个方法进行增强可以设置优先级 加一个@Order（value=“”）注解 可以加个值 这个值越小优先级就越高

    （了解） 用配置文件进行aop操作

     <bean id="book" class="com.jiang.spring.aop2.Book"></bean>

        <bean id="bookProxy" class="com.jiang.spring.aop2.bookproxy"></bean>
      配置aop增强
        <aop:config>
      配置切入点
            <aop:pointcut id="p" expression="execution(* com.jiang.spring.aop2.Book.buy(..))"/>
     配置切面
            <aop:aspect ref="bookProxy">
    配置增强作用在具体的方法上
                <aop:before method="before" pointcut-ref="p"></aop:before>
            </aop:aspect>
        </aop:config>
     也可以使用完全注解开发